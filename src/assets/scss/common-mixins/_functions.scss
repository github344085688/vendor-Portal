@function divide($dividend, $divisor, $precision: 10) {
	$sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
	$dividend: abs($dividend);
	$divisor: abs($divisor);
	@if $dividend == 0 {
		@return 0;
	}
	@if $divisor == 0 {
		@error "Cannot divide by 0";
	}
	$remainder: $dividend;
	$result: 0;
	$factor: 10;
	@while ($remainder > 0 and $precision >= 0) {
		$quotient: 0;
		@while ($remainder >= $divisor) {
			$remainder: $remainder - $divisor;
			$quotient: $quotient + 1;
		}
		$result: $result * 10 + $quotient;
		$factor: $factor * .1;
		$remainder: $remainder * 10;
		$precision: $precision - 1;
		@if ($precision < 0 and $remainder >= $divisor * 5) {
			$result: $result + 1;
		}
	}
	$result: $result * $factor * $sign;
	$dividend-unit: unit($dividend);
	$divisor-unit: unit($divisor);
	$unit-map: (
		"px": 1px,
		"rem": 1rem,
		"em": 1em,
		"%": 1%
	);
	@if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
		$result: $result * map-get($unit-map, $dividend-unit);
	}
	@return $result;
}


@function breakpoint-min($name, $breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

@function breakpoint-min-default($name, $breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, 'default');
}

@function breakpoint-infix($name, $breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
@function breakpoint-default($name, $breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "default", "-#{$name}");
}

@function grid-repeat-width($size,$margin,$width) {
	$repeatw: if($margin != 10% and $width !=1fr, #{( 100%-2%*($size - 1) )/$size},$width);
	@return $repeatw
}



